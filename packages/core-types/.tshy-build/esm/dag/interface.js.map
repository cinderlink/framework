{"version":3,"file":"interface.js","sourceRoot":"","sources":["../../../src/dag/interface.ts"],"names":[],"mappings":"","sourcesContent":["import type { CID } from \"multiformats\";\nimport type { DID } from \"dids\";\nimport type { JWE } from \"did-jwt\";\nimport { DAGStoreOptions } from \"./types\";\n\n// Define GetOptions locally since Helia doesn't have a direct equivalent\n// This matches the interface from ipfs-core-types\nexport interface GetOptions {\n  timeout?: number;\n  signal?: AbortSignal;\n  path?: string;\n}\n\nexport interface DAGInterface {\n  store<Data = unknown>(\n    data: Data,\n    options?: DAGStoreOptions\n  ): Promise<CID | undefined>;\n  load<Data = unknown>(\n    cid: CID | string,\n    path?: string,\n    options?: GetOptions\n  ): Promise<Data | undefined>;\n}\n\nexport interface DIDDagInterface extends DAGInterface {\n  did: DID;\n  storeEncrypted<\n    Data extends Record<string, unknown> = Record<string, unknown>\n  >(\n    data: Data,\n    recipients?: string[],\n    options?: DAGStoreOptions\n  ): Promise<CID | undefined>;\n  loadEncrypted(\n    cid: CID | string,\n    path?: string,\n    options?: GetOptions\n  ): Promise<JWE | undefined>;\n  loadDecrypted<Data = Record<string, unknown>>(\n    cid: CID | string,\n    path?: string,\n    options?: GetOptions\n  ): Promise<Data | undefined>;\n}\n\nexport interface DagKeyval {\n  id: string;\n  dag: DAGInterface;\n  get(key: string): Promise<unknown>;\n  set(key: string, value: unknown): Promise<void>;\n  delete(key: string): Promise<void>;\n  has(key: string): Promise<boolean>;\n  save(): Promise<CID>;\n  load(cid: CID, path?: string, options?: GetOptions): Promise<void>;\n}\n"]}