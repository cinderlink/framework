{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/protocol/types.ts"],"names":[],"mappings":"","sourcesContent":["import { JWE } from \"did-jwt\";\nimport { DagJWS, VerifyJWSResult } from \"dids\";\nimport * as multiformats from \"multiformats\";\nimport { Peer } from \"./../p2p\";\nimport { PluginEventDef } from \"./../plugin/types\";\n\nexport interface ProtocolRequest extends Record<string, unknown> {\n  requestId?: string;\n  [key: string]: unknown;\n}\n\nexport interface EncodingOptions {\n  sign: boolean;\n  encrypt: boolean;\n  recipients?: string[];\n}\n\nexport interface HandshakedPeer extends Peer, ProtocolRequest {\n  handshake: true;\n  did: string;\n}\n\nexport interface HandshakeRequest extends ProtocolRequest {\n  did: string;\n  protocols?: string[];\n}\n\nexport interface HandshakeChallenge extends ProtocolRequest {\n  challenge: string;\n}\n\nexport interface HandshakeComplete extends ProtocolRequest {\n  challenge: string;\n}\n\nexport interface HandshakeSuccess extends ProtocolRequest {}\n\nexport interface HandshakeError extends ProtocolRequest {\n  error: string;\n}\n\nexport type ProtocolJWSResult<Payload = ProtocolRequest> = VerifyJWSResult & {\n  payload: Payload;\n};\n\nexport type SignedProtocolPayload<\n  Payload = ProtocolRequest,\n  Verified extends boolean = false\n> = Verified extends true ? ProtocolJWSResult<Payload> : DagJWS;\n\nexport type EncryptedProtocolPayload<\n  Payload = ProtocolRequest,\n  Decrypted extends boolean = false\n> = Decrypted extends true ? multiformats.ByteView<Payload> : JWE;\n\nexport type ProtocolPayload<\n  Payload = ProtocolRequest,\n  Encoding extends EncodingOptions = EncodingOptions\n> = Encoding[\"encrypt\"] extends true\n  ? EncryptedProtocolPayload<\n      Payload,\n      Encoding[\"encrypt\"] extends true ? false : true\n    >\n  : Encoding[\"sign\"] extends true\n  ? SignedProtocolPayload<Payload, Encoding[\"sign\"] extends true ? false : true>\n  : Payload;\n\nexport type DecodedProtocolPayload<\n  Request = ProtocolRequest,\n  Encoding extends EncodingOptions = EncodingOptions\n> = {\n  payload: Request;\n  signed?: Encoding[\"sign\"];\n  encrypted?: Encoding[\"encrypt\"];\n  recipients?: Encoding[\"recipients\"];\n  sender?: string;\n};\n\nexport type EncodedProtocolPayload<\n  Payload = ProtocolPayload,\n  Encoding extends EncodingOptions = EncodingOptions\n> = {\n  signed?: Encoding[\"sign\"];\n  encrypted?: Encoding[\"encrypt\"];\n  recipients?: Encoding[\"recipients\"];\n  payload: ProtocolPayload<Payload, Encoding>;\n};\n\nexport type ProtocolMessage<\n  Payload = ProtocolRequest,\n  Topic = string,\n  Encoding extends EncodingOptions = EncodingOptions\n> = EncodedProtocolPayload<Payload, Encoding> & {\n  topic: Topic;\n  cid?: string;\n  peer?: Peer;\n};\n\nexport type OutgoingProtocolMessage<\n  Payload = ProtocolRequest,\n  Topic = string\n> = { topic: Topic; payload: Payload };\n\nexport interface ProtocolKeepAlive {\n  timestamp: number;\n}\n\nexport type DecodedProtocolMessage<\n  Events extends PluginEventDef = PluginEventDef,\n  Type extends keyof Events = keyof Events,\n  Topic extends keyof Events[Type] = keyof Events[Type],\n  Encoding extends EncodingOptions = EncodingOptions\n> = {\n  topic: Topic;\n  payload: Events[Type][Topic];\n  peer: Peer;\n  signed?: Encoding[\"sign\"];\n  encrypted?: Encoding[\"encrypt\"];\n  recipients?: Encoding[\"recipients\"];\n};\n\nexport interface ProtocolEvents<\n  PluginEvents extends PluginEventDef = PluginEventDef\n> extends PluginEventDef {\n  send: {\n    \"/cinderlink/keepalive\": ProtocolKeepAlive;\n  };\n  receive: {\n    \"/cinderlink/keepalive\": ProtocolKeepAlive;\n  };\n  publish: {\n    \"/cinderlink/peer/connect\": Peer;\n    \"/cinderlink/peer/disconnect\": Peer;\n  };\n  emit: {\n    \"/cinderlink/keepalive/timeout\": Peer;\n  } & {\n    [key in `/cinderlink/request/${string}`]:\n      | DecodedProtocolMessage<PluginEvents>\n      | DecodedProtocolMessage<PluginEvents>;\n  };\n}\n"]}