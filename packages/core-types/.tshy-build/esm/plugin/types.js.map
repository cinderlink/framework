{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/plugin/types.ts"],"names":[],"mappings":"","sourcesContent":["import { EncodingOptions, ProtocolPayload } from \"./../protocol/types\";\nimport { ReceiveEventHandlers } from \"./../p2p/types\";\nimport { SubscribeEventHandlers } from \"../pubsub\";\nimport { CinderlinkClientEvents, CinderlinkClientInterface } from \"../client\";\nimport { SubLoggerInterface } from \"../logger\";\n\nexport type PluginEventPayloads<T extends Record<string, unknown> = any> =\n  Record<keyof T, ProtocolPayload<T[keyof T], EncodingOptions>>;\nexport type PluginEventHandler<T = unknown> = (payload: T) => void;\nexport type PluginEventHandlers<\n  Events extends PluginEventDef[keyof PluginEventDef] = PluginEventDef[keyof PluginEventDef]\n> = {\n  [key in keyof Events]: PluginEventHandler<Events[key]>;\n};\n\nexport interface PluginEventDef {\n  send: PluginEventPayloads;\n  receive: PluginEventPayloads;\n  publish: PluginEventPayloads;\n  subscribe: PluginEventPayloads;\n  emit: PluginEventPayloads;\n}\n\nexport interface PluginBaseInterface {\n  id: string;\n  logger: SubLoggerInterface;\n  client: CinderlinkClientInterface<any>;\n  started: boolean;\n  start?(): Promise<void>;\n  stop?(): Promise<void>;\n  pubsub: SubscribeEventHandlers<any>;\n  p2p: ReceiveEventHandlers<any>;\n  coreEvents?: Partial<PluginEventHandlers<CinderlinkClientEvents[\"emit\"]>>;\n  pluginEvents?: PluginEventHandlers<any>;\n}\n\nexport interface PluginInterface<\n  Events extends PluginEventDef = any,\n  PeerEvents extends PluginEventDef = any,\n  Client extends CinderlinkClientInterface<\n    Events & PeerEvents\n  > = CinderlinkClientInterface<any>\n> extends PluginBaseInterface {\n  logger: SubLoggerInterface;\n  client: Client;\n  pubsub: SubscribeEventHandlers<Events>;\n  p2p: ReceiveEventHandlers<Events>;\n  pluginEvents?: PluginEventHandlers<PeerEvents[\"emit\"]>;\n  started: boolean;\n}\nexport default PluginInterface;\n\nexport type PluginConstructor<\n  Client extends CinderlinkClientInterface = CinderlinkClientInterface,\n  Options extends Record<string, unknown> = {}\n> = new (client: Client, options?: Options) => PluginInterface;\n"]}