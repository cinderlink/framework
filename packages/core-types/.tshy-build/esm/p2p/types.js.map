{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/p2p/types.ts"],"names":[],"mappings":"","sourcesContent":["import { PeerId } from \"@libp2p/interface\";\nimport { PluginEventDef, PluginEventHandlers } from \"../plugin/types\";\nimport {\n  EncodingOptions,\n  OutgoingProtocolMessage,\n  ProtocolMessage,\n} from \"../protocol/types\";\n\nexport type Peer = {\n  did?: string;\n  peerId: PeerId;\n  role: \"server\" | \"peer\";\n  subscriptions: string[];\n  metadata: Record<string, string>;\n  connected: boolean;\n  connectedAt?: number;\n  disconnectedAt?: number;\n  seenAt?: number;\n};\n\nexport type PeerRole = \"server\" | \"peer\";\n\nexport type P2PCoreEvents = {\n  \"/peer/connect\": Peer;\n  \"/peer/disconnect\": Peer;\n  \"/server/connect\": Peer;\n  \"/server/disconnect\": Peer;\n};\n\nexport type ReceiveEvents<\n  PluginEvents extends PluginEventDef = any,\n  Encoding extends EncodingOptions = EncodingOptions\n> = {\n  [K in keyof PluginEvents[\"receive\"]]: IncomingP2PMessage<\n    PluginEvents,\n    K,\n    Encoding\n  >;\n};\n\nexport type ReceiveEventHandlers<PluginEvents extends PluginEventDef = any> =\n  PluginEventHandlers<ReceiveEvents<PluginEvents>>;\n\nexport type OutgoingP2PMessage<\n  PluginEvents extends PluginEventDef = any,\n  Topic extends keyof PluginEvents[\"send\"] = keyof PluginEvents[\"send\"]\n> = OutgoingProtocolMessage<PluginEvents[\"send\"][Topic], Topic>;\n\nexport type IncomingP2PMessage<\n  PluginEvents extends PluginEventDef = any,\n  Topic extends keyof PluginEvents[\"receive\"] = keyof PluginEvents[\"receive\"],\n  Encoding extends EncodingOptions = { sign: false; encrypt: false }\n> = ProtocolMessage<PluginEvents[\"receive\"][Topic], Topic, Encoding> & {\n  peer: Peer;\n  signed: Encoding[\"sign\"];\n  encrypted: Encoding[\"encrypt\"];\n  recipients?: Encoding[\"recipients\"];\n};\n"]}