{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../src/database/query.ts"],"names":[],"mappings":"","sourcesContent":["import { TableDefinition, TableInterface, TableRow } from \"./table\";\n\nexport type InstructionType<Row extends TableRow = TableRow> = {\n  where: WhereInstruction<Row>;\n  orderBy: OrderByInstruction<Row>;\n  limit: LimitInstruction;\n  offset: OffsetInstruction;\n  or: OrInstruction<Row>;\n  and: AndInstruction<Row>;\n  update: UpdateInstruction<Row>;\n  delete: DeleteInstruction;\n  select: SelectInstruction<Row>;\n  returning: ReturningInstruction<Row>;\n  nocache: NoCacheInstruction;\n};\n\nexport type QueryInstruction<\n  Row extends TableRow = TableRow,\n  I extends keyof InstructionType<Row> = keyof InstructionType<Row>\n> = {\n  instruction: I;\n} & InstructionType<Row>[I];\n\nexport interface WhereInstruction<Row extends TableRow = TableRow> {\n  instruction: \"where\";\n  field: keyof Row;\n  operation: Operation;\n  value: Operation extends \"in\" | \"!in\" | \"contains\" | \"!contains\"\n    ? Row[keyof Row][]\n    : Operation extends \"between\" | \"!between\"\n    ? [Row[keyof Row], Row[keyof Row]]\n    : Row[keyof Row];\n}\n\nexport interface OrderByInstruction<Row extends TableRow = TableRow> {\n  instruction: \"orderBy\";\n  field: keyof Row;\n  direction: \"asc\" | \"desc\";\n}\n\nexport interface LimitInstruction {\n  instruction: \"limit\";\n  limit: number;\n}\n\nexport interface OffsetInstruction {\n  instruction: \"offset\";\n  offset: number;\n}\n\nexport interface OrInstruction<Row extends TableRow = TableRow> {\n  instruction: \"or\";\n  queries: QueryInstruction<Row>[];\n}\n\nexport interface AndInstruction<Row extends TableRow = TableRow> {\n  instruction: \"and\";\n  queries: QueryInstruction<Row>[];\n}\n\nexport interface UpdateInstruction<Row extends TableRow = TableRow> {\n  instruction: \"update\";\n  values?: Partial<Row>;\n  fn?: (row: Row) => Row;\n}\n\nexport interface DeleteInstruction {\n  instruction: \"delete\";\n}\n\nexport interface SelectInstruction<Row extends TableRow = TableRow> {\n  instruction: \"select\";\n  fields?: (keyof Row)[];\n}\n\nexport interface ReturningInstruction<Row extends TableRow = TableRow> {\n  instruction: \"returning\";\n  fields?: (keyof Row)[];\n}\n\nexport interface NoCacheInstruction {\n  instruction: \"nocache\";\n}\n\nexport type Operation =\n  | \"=\"\n  | \">\"\n  | \">=\"\n  | \"<\"\n  | \"<=\"\n  | \"!=\"\n  | \"between\"\n  | \"!between\"\n  | \"in\"\n  | \"!in\"\n  | \"contains\"\n  | \"!contains\";\n\nexport interface QueryBuilderInterface<Row extends TableRow = TableRow> {\n  instructions: QueryInstruction<Row>[];\n  terminator: string | undefined;\n  where<Key extends keyof Row = keyof Row>(\n    field: Key,\n    operation: Operation,\n    value: Row[Key][] | Row[Key]\n  ): QueryBuilderInterface<Row>;\n  orderBy(\n    field: keyof Row,\n    direction: \"asc\" | \"desc\"\n  ): QueryBuilderInterface<Row>;\n  limit(value: number): QueryBuilderInterface<Row>;\n  offset(value: number): QueryBuilderInterface<Row>;\n  and(fn: (qb: QueryBuilderInterface<Row>) => void): QueryBuilderInterface<Row>;\n  or(fn: (qb: QueryBuilderInterface<Row>) => void): QueryBuilderInterface<Row>;\n  update(fields: Partial<Row>): QueryBuilderInterface<Row>;\n  nocache(): QueryBuilderInterface<Row>;\n  update(\n    values:\n      | Partial<Row>\n      | ((row: Row) => Promise<Exclude<Row, \"id\">> | Exclude<Row, \"id\">)\n  ): QueryBuilderInterface<Row>;\n  delete(): QueryBuilderInterface<Row>;\n  select(fields?: (keyof Row)[]): QueryBuilderInterface<Row>;\n  returning(fields?: (keyof Row)[]): QueryBuilderInterface<Row>;\n  instructionsMatchRecord(record: Row): boolean;\n  execute(): Promise<QueryResult<Row>>;\n}\n\nexport interface QueryResult<Row = TableRow> {\n  rows: Row[];\n  first(): Row;\n  filter(fn: (row: Row) => boolean): QueryResult<Row>;\n  pick<Keys extends (keyof Row)[]>(\n    fields: Keys\n  ): QueryResult<Extract<Row, Keys>>;\n  all(): Row[];\n  count(): number;\n}\n\nexport interface TableQueryInterface<\n  Row extends TableRow = TableRow,\n  Def extends TableDefinition<Row> = TableDefinition<Row>\n> extends QueryBuilderInterface<Row> {\n  table: TableInterface<Row, Def>;\n  instructions: QueryInstruction<Row>[];\n  execute(): Promise<QueryResult<Row>>;\n}\n"]}