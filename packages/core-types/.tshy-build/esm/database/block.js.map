{"version":3,"file":"block.js","sourceRoot":"","sources":["../../../src/database/block.ts"],"names":[],"mappings":"","sourcesContent":["import { AsPlainObject } from \"minisearch\";\nimport { TableDefinition, TableRow } from \"./table\";\n\nexport interface BlockHeaders {\n  schema: string;\n  table: string;\n  encrypted: boolean;\n  index: number;\n  recordsFrom: number;\n  recordsTo: number;\n}\n\nexport interface BlockFilters<\n  Row extends TableRow = TableRow,\n  Def extends TableDefinition<Row> = TableDefinition<Row>\n> {\n  aggregates: BlockAggregates<Row>;\n  indexes: BlockIndexes<Row, Def>;\n  search?: AsPlainObject;\n}\n\nexport interface BlockData<\n  Row extends TableRow = TableRow,\n  Def extends TableDefinition<Row> = TableDefinition<Row>\n> {\n  prevCID?: string;\n  headers: BlockHeaders;\n  filters: BlockFilters<Row, Def>;\n  records: Record<number, Row>;\n}\n\nexport interface BlockIndex<Row extends TableRow = TableRow> {\n  values: Row[keyof Row][];\n  ids: number[];\n}\n\nexport interface BlockIndexDef<Row extends TableRow = TableRow> {\n  unique?: boolean;\n  fields: (keyof Row)[];\n}\n\nexport type BlockAggregator =\n  | \"sum\"\n  | \"count\"\n  | \"avg\"\n  | \"min\"\n  | \"max\"\n  | \"distinct\"\n  | \"range\";\n\nexport type BlockAggregateDef<Row extends TableRow = TableRow> = Record<\n  keyof Row,\n  BlockAggregator\n>;\n\nexport interface BlockAggregateTypes {\n  sum: number;\n  count: number;\n  avg: number;\n  min: number;\n  max: number;\n  distinct: string[] | number[];\n  range: [number, number];\n}\n\nexport type BlockAggregates<Row extends TableRow = TableRow> = Record<\n  keyof Row,\n  BlockAggregateTypes[keyof BlockAggregateTypes]\n>;\n\nexport type BlockIndexes<\n  Row extends TableRow = TableRow,\n  Def extends TableDefinition<Row> = TableDefinition<Row>\n> = Record<keyof Def[\"indexes\"], Record<string, BlockIndex<Row>>>;\n"]}